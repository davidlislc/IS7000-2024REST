package org.is70002024.market.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MarketOverviewAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMarketOverviewAllPropertiesEquals(MarketOverview expected, MarketOverview actual) {
        assertMarketOverviewAutoGeneratedPropertiesEquals(expected, actual);
        assertMarketOverviewAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMarketOverviewAllUpdatablePropertiesEquals(MarketOverview expected, MarketOverview actual) {
        assertMarketOverviewUpdatableFieldsEquals(expected, actual);
        assertMarketOverviewUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMarketOverviewAutoGeneratedPropertiesEquals(MarketOverview expected, MarketOverview actual) {
        assertThat(expected)
            .as("Verify MarketOverview auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMarketOverviewUpdatableFieldsEquals(MarketOverview expected, MarketOverview actual) {
        assertThat(expected)
            .as("Verify MarketOverview relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getPrice()).as("check price").isEqualTo(actual.getPrice()))
            .satisfies(e -> assertThat(e.getChange()).as("check change").isEqualTo(actual.getChange()))
            .satisfies(e -> assertThat(e.getTicker()).as("check ticker").isEqualTo(actual.getTicker()))
            .satisfies(e -> assertThat(e.getMarketdate()).as("check marketdate").isEqualTo(actual.getMarketdate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMarketOverviewUpdatableRelationshipsEquals(MarketOverview expected, MarketOverview actual) {
        // empty method
    }
}
