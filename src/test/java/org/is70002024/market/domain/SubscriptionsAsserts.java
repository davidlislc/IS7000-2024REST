package org.is70002024.market.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SubscriptionsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscriptionsAllPropertiesEquals(Subscriptions expected, Subscriptions actual) {
        assertSubscriptionsAutoGeneratedPropertiesEquals(expected, actual);
        assertSubscriptionsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscriptionsAllUpdatablePropertiesEquals(Subscriptions expected, Subscriptions actual) {
        assertSubscriptionsUpdatableFieldsEquals(expected, actual);
        assertSubscriptionsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscriptionsAutoGeneratedPropertiesEquals(Subscriptions expected, Subscriptions actual) {
        assertThat(expected)
            .as("Verify Subscriptions auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscriptionsUpdatableFieldsEquals(Subscriptions expected, Subscriptions actual) {
        assertThat(expected)
            .as("Verify Subscriptions relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getSubdate()).as("check subdate").isEqualTo(actual.getSubdate()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscriptionsUpdatableRelationshipsEquals(Subscriptions expected, Subscriptions actual) {
        assertThat(expected)
            .as("Verify Subscriptions relationships")
            .satisfies(e -> assertThat(e.getService()).as("check service").isEqualTo(actual.getService()));
    }
}
